{"version":3,"file":"static/js/247.e6959066.chunk.js","mappings":"6LAWaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,mJCNWC,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASG,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAoBH,EAAS,YAAYI,MAAK,YAAe,IAAZT,EAAW,EAAXA,KAE/C,GADAI,EAAUF,EAAAA,EAAAA,SACU,IAAhBF,EAAKU,OAEP,MADAN,EAAUF,EAAAA,EAAAA,UACJ,IAAIS,MAAM,0CAEhBV,EACED,EAAKY,KAAI,YACP,MAAO,CAAEC,aADoD,EAAnDA,aACaC,KADsC,EAArCA,KACKC,cADgC,EAA/BA,cACcC,UADiB,EAAhBA,UAE9C,KAEHZ,EAAUF,EAAAA,EAAAA,SAEb,GAGF,CAFC,MAAOe,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACZ,KAGF,UAAC,IAAD,CACEe,GAAG,KACHC,QAAQ,OACRC,QAAQ,MACRC,oBAAoB,gBAJtB,UAMGvB,EAAKU,OAAS,GACF,aAAXP,GACAH,EAAKY,KAAI,YAAuD,IAApDC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC7C,OACE,2BACE,gBACEQ,IACmB,OAAjBX,EACIY,EAAAA,GACAC,EAAAA,GAAkBb,EAExBc,IAAKb,KAEP,wBAAKA,GAAQC,KACb,uCAAeC,OAVRF,EAaZ,IACS,aAAXX,IACC,4BACE,mEACA,gBAAKqB,IAAKI,EAAAA,GAAiBD,IAAI,eAKxC,C,uDCvEM,IAAMzB,EAAS,CACpB2B,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W,mJCFNC,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,kCAELC,EAAU,mCAEHC,EAAS,mCAAG,2GAAOC,EAAP,+BAAgB,CAAC,EAAjB,SACAL,EAAUM,IAAI,qBAAsB,CACzDD,QAAO,QACLE,QAASJ,GACNE,KAJgB,uBACfG,EADe,EACfA,KADe,kBAOhBA,GAPgB,2CAAH,qDAUTC,EAAgB,mCAAG,2GAAOJ,EAAP,+BAAgB,CAAC,EAAjB,SACPL,EAAUM,IAAI,eAAgB,CACnDD,QAAO,QAAGE,QAASJ,GAAYE,KAFH,uBACtBG,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhBjC,EAAmB,mCAAG,WAAOmC,GAAP,gGAAWC,EAAX,+BAAkB,GAAIN,EAAtB,+BAA+B,CAAC,EAAhC,SACVL,EAAUM,IAAV,gBAAuBI,GAAvB,OAA4BC,GAAQ,CACzDN,QAAO,QACLE,QAASJ,GACNE,KAJ0B,uBACzBG,EADyB,EACzBA,KADyB,kBAO1BA,GAP0B,2CAAH,qD","sources":["BaseStyles/Box.jsx","components/Cast/Cast.jsx","constants/status.constants.js","services/API.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  shadow,\n  grid,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  shadow,\n  grid\n);\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieAndInfoById } from 'services/API';\nimport {\n  BASE_POSTER_URL,\n  FAKE_ACTOR_PHOTO,\n  NOT_FOUND_IMAGE,\n} from 'constants/BaseURLs';\nimport { Box } from 'BaseStyles/Box';\nimport { STATUS } from 'constants/status.constants';\n\nexport const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(STATUS.idle);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      getMovieAndInfoById(movieId, '/credits').then(({ cast }) => {\n        setStatus(STATUS.pending);\n        if (cast.length === 0) {\n          setStatus(STATUS.rejected);\n          throw new Error(\"We don't have any cast for this movie.\");\n        } else {\n          setCast(\n            cast.map(({ profile_path, name, original_name, character }) => {\n              return { profile_path, name, original_name, character };\n            })\n          );\n          setStatus(STATUS.resolved);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  return (\n    <Box\n      as=\"ul\"\n      display=\"grid\"\n      gridGap=\"8px\"\n      gridTemplateColumns=\"repeat(5,1fr)\"\n    >\n      {cast.length > 0 &&\n        status === 'resolved' &&\n        cast.map(({ profile_path, name, original_name, character }) => {\n          return (\n            <li key={name}>\n              <img\n                src={\n                  profile_path === null || undefined\n                    ? FAKE_ACTOR_PHOTO\n                    : BASE_POSTER_URL + profile_path\n                }\n                alt={name}\n              />\n              <h3>{name || original_name}</h3>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n      {status === 'rejected' && (\n        <div>\n          <p>We don't have any cast for this movie.</p>\n          <img src={NOT_FOUND_IMAGE} alt=\"what?\" />\n        </div>\n      )}\n    </Box>\n  );\n};\n","export const STATUS = {\n  idle: 'idle',\n  pending: 'pending',\n  resolved: 'resolved',\n  rejected: 'rejected',\n};\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\nconst API_KEY = 'f516fdc3d4918369a6ad5ae834597c19';\n\nexport const getMovies = async (params = {}) => {\n  const { data } = await moviesApi.get('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      ...params,\n    },\n  });\n  return data;\n};\n\nexport const getMovieBySearch = async (params = {}) => {\n  const { data } = await moviesApi.get('search/movie', {\n    params: { api_key: API_KEY, ...params },\n  });\n  return data;\n};\n\nexport const getMovieAndInfoById = async (id, type = '', params = {}) => {\n  const { data } = await moviesApi.get(`movie/${id}${type}`, {\n    params: {\n      api_key: API_KEY,\n      ...params,\n    },\n  });\n  return data;\n};\n"],"names":["Box","styled","color","space","layout","flexbox","border","shadow","grid","Cast","useState","cast","setCast","STATUS","status","setStatus","movieId","useParams","useEffect","getMovieAndInfoById","then","length","Error","map","profile_path","name","original_name","character","error","console","log","as","display","gridGap","gridTemplateColumns","src","FAKE_ACTOR_PHOTO","BASE_POSTER_URL","alt","NOT_FOUND_IMAGE","idle","pending","resolved","rejected","moviesApi","axios","baseURL","API_KEY","getMovies","params","get","api_key","data","getMovieBySearch","id","type"],"sourceRoot":""}