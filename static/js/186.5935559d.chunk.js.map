{"version":3,"file":"static/js/186.5935559d.chunk.js","mappings":"4PAMaA,EAAU,WACrB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAASG,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,IACEH,EAAUF,EAAAA,EAAAA,UACVM,EAAAA,EAAAA,IAAoBH,EAAS,YAAYI,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QAC/C,GAAuB,IAAnBA,EAAQC,OAEV,MADAP,EAAUF,EAAAA,EAAAA,UACJ,IAAIU,MAAM,6CAGhB,OADAR,EAAUF,EAAAA,EAAAA,UACHD,EACLS,EAAQG,KAAI,YACV,MAAO,CAAEC,GAD8B,EAA1BA,GACAC,OAD0B,EAAtBA,OACIC,QADkB,EAAdA,QAE1B,IAGN,GAGF,CAFC,MAAOJ,OACPK,QAAQC,IAAIN,MACb,CACF,GAAE,CAACP,KAGF,0BACGL,EAAQW,OAAS,GACL,aAAXR,GACAH,EAAQa,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,2BACE,qCAAaD,MACb,yBAAIC,EAAJ,SAFOF,EAKZ,IACS,aAAXX,IACC,4BACE,sEACA,gBAAKgB,IAAKC,EAAAA,GAAiBC,IAAI,eAKxC,C,uDCpDM,IAAMnB,EAAS,CACpBoB,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W,mJCFNC,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,kCAELC,EAAU,mCAEHC,EAAS,mCAAG,2GAAOC,EAAP,+BAAgB,CAAC,EAAjB,SACAL,EAAUM,IAAI,qBAAsB,CACzDD,QAAO,QACLE,QAASJ,GACNE,KAJgB,uBACfG,EADe,EACfA,KADe,kBAOhBA,GAPgB,2CAAH,qDAUTC,EAAgB,mCAAG,2GAAOJ,EAAP,+BAAgB,CAAC,EAAjB,SACPL,EAAUM,IAAI,eAAgB,CACnDD,QAAO,QAAGE,QAASJ,GAAYE,KAFH,uBACtBG,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhB1B,EAAmB,mCAAG,WAAOM,GAAP,gGAAWsB,EAAX,+BAAkB,GAAIL,EAAtB,+BAA+B,CAAC,EAAhC,SACVL,EAAUM,IAAV,gBAAuBlB,GAAvB,OAA4BsB,GAAQ,CACzDL,QAAO,QACLE,QAASJ,GACNE,KAJ0B,uBACzBG,EADyB,EACzBA,KADyB,kBAO1BA,GAP0B,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","constants/status.constants.js","services/API.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieAndInfoById } from 'services/API';\nimport { NOT_FOUND_IMAGE } from 'constants/BaseURLs';\nimport { STATUS } from 'constants/status.constants';\n\nexport const Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState(STATUS.idle);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      setStatus(STATUS.pending);\n      getMovieAndInfoById(movieId, '/reviews').then(({ results }) => {\n        if (results.length === 0) {\n          setStatus(STATUS.rejected);\n          throw new Error(\"We don't have any reviews for this movie.\");\n        } else {\n          setStatus(STATUS.resolved);\n          return setReviews(\n            results.map(({ id, author, content }) => {\n              return { id, author, content };\n            })\n          );\n        }\n      });\n    } catch (Error) {\n      console.log(Error);\n    }\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews.length > 0 &&\n        status === 'resolved' &&\n        reviews.map(({ id, author, content }) => {\n          return (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content} </p>\n            </li>\n          );\n        })}\n      {status === 'rejected' && (\n        <div>\n          <p>We don't have any reviews for this movie.</p>\n          <img src={NOT_FOUND_IMAGE} alt=\"what?\" />\n        </div>\n      )}\n    </ul>\n  );\n};\n","export const STATUS = {\n  idle: 'idle',\n  pending: 'pending',\n  resolved: 'resolved',\n  rejected: 'rejected',\n};\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\nconst API_KEY = 'f516fdc3d4918369a6ad5ae834597c19';\n\nexport const getMovies = async (params = {}) => {\n  const { data } = await moviesApi.get('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      ...params,\n    },\n  });\n  return data;\n};\n\nexport const getMovieBySearch = async (params = {}) => {\n  const { data } = await moviesApi.get('search/movie', {\n    params: { api_key: API_KEY, ...params },\n  });\n  return data;\n};\n\nexport const getMovieAndInfoById = async (id, type = '', params = {}) => {\n  const { data } = await moviesApi.get(`movie/${id}${type}`, {\n    params: {\n      api_key: API_KEY,\n      ...params,\n    },\n  });\n  return data;\n};\n"],"names":["Reviews","useState","reviews","setReviews","STATUS","status","setStatus","movieId","useParams","useEffect","getMovieAndInfoById","then","results","length","Error","map","id","author","content","console","log","src","NOT_FOUND_IMAGE","alt","idle","pending","resolved","rejected","moviesApi","axios","baseURL","API_KEY","getMovies","params","get","api_key","data","getMovieBySearch","type"],"sourceRoot":""}